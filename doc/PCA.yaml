# Part of the Fluid Corpus Manipulation Project (http://www.flucoma.org/)
# Copyright 2017-2019 University of Huddersfield.
# Licensed under the BSD-3 License.
# See license.md file in the project root for full license information.
# This project has received funding from the European Research Council (ERC)
# under the European Unionâ€™s Horizon 2020 research and innovation programme
# (grant agreement No 725899).
---
digest: Dimensionality Reduction with Principal Component Analysis
sc-categries: Dimensionality Reduction, Data Processing
sc-related: Classes/FluidMDS, Classes/FluidDataSet
see-also: 
description: |
  Principal Components Analysis of a :fluid-obj:`FluidDataSet`

  https://scikit-learn.org/stable/modules/decomposition.html#principal-component-analysis-pca

messages: 
  fit:
   description: |
      Train this model on a :fluid-obj:`FluidDataSet` but don't transform the data
   args:
    - name: dataset
      description: |
        A :fluid-obj:`FluidDataSet` to analyse
    - name: k
      description: |
        The number of dimensions to reduce to
    - name: action
      description: |
        Run when done
  transform:
   description: |
      Given a trained model, apply the reduction to a source :fluid-obj:`FluidDataSet` and write to a destination. Can be the same
   args:
    - name: sourceDataset
      description: |
        Source data, or the dataset name
    - name: destDataset
      description: |
        Destination data, or the dataset name
    - name: action
      description: |
        Run when done
  fitTransform:
   description: |
      :fluid-obj:`FluidPCA#fit` and :fluid-obj:`FluidPCA#transform` in a single pass
   args:
    - name: sourceDataset
      description: |
        Source data, or the dataset name
    - name: destDataset
      description: |
        Destination data, or the dataset name
    - name: k
      description: |
        The number of dimensions to reduce to
    - name: action
      description: |
        Run when done
  transformPoint:
   description: |
      Given a trained model, transform the data point in a |buffer| and write to an output
   args:
    - name: sourceBuffer
      description: |
        Input data
    - name: destBuffer
      description: |
        Output data
    - name: action
      description: |
        Run when done
