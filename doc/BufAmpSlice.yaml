digest: Amplitude-based Slicer for Buffers
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluCoMa, Guides/FluidDecomposition
description: |
  "This class implements an amplitude-based slicer, with various customisable options and conditions to detect absolute and relative amplitude changes as onsets and offsets. It is part of the Fluid Decomposition Toolkit of the FluCoMa project.footnote::This was made possible thanks to the FluCoMa project ( http://www.flucoma.org/ ) funded by the European Research Council ( https://erc.europa.eu/ ) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 725899).::"

  "FluidAmpSlice is based on two envelop followers on a highpassed version of the signal: one absolute, and one relative. Each have features that will interact, including independent Schmidt triggers and state-aware time contraints. The example code below is unfolding the various possibilites in order of complexity."

  "The process will return a two-channel buffer with the addresses of the onset on the first channel, and the address of the offset on the second channel."
parameters:
  server:
    The server on which the buffers to be processed are allocated.
  source:
    description: |
      The index of the buffer to use as the source material to be sliced through novelty identification. The different channels of multichannel buffers will be summed.
  startFrame:
    description: |
      Where in the srcBuf should the slicing process start, in sample.
  numFrames:
    description: |
      How many frames should be processed.
  startChan:
    description: |
      For multichannel sources, which channel should be processed.
  numChans:
    description: |
      For multichannel sources, how many channel should be summed.
  indices:
    description: |
      The index of the buffer where the indices (in sample) of the estimated starting points of slices will be written. The first and last points are always the boundary points of the analysis.
  absRampUp:
     description: |
         The number of samples the absolute envelope follower will take to reach the next value when raising
  absRampDown:
     description: |
         The number of samples the absolute envelope follower will take to reach the next value when falling.
  absThreshOn:
     description: |
         The threshold in dB of the absolute envelope follower to trigger an onset, aka to go ON when in OFF state.
  absThreshOff:
     description: |
         The threshold in dB of the absolute envelope follower to trigger an offset, , aka to go ON when in OFF state.
  minSliceLength:
     description: |
         The length in samples that the Slice will stay ON. Changes of states during that period will be ignored.
  minSilenceLength:
     description: |
         The length in samples that the Slice will stay OFF. Changes of states during that period will be ignored.
  minLengthAbove:
     description: |
         The length in samples that the absolute envelope have to be above the threshold to consider it a valid transition to ON. The Slice will start at the first sample when the condition is met. Therefore, this affects the latency.
  minLengthBelow:
     description: |
         The length in samples that the absolute envelope have to be below the threshold to consider it a valid transition to OFF. The Slice will end at the first sample when the condition is met. Therefore, this affects the latency.
  lookBack:
     description: |
         The length of the buffer kept before an onset to allow the algorithm, once a new Slice is detected, to go back in time (up to that many samples) to find the minimum amplitude as the Slice onset point. This affects the latency of the algorithm.
  lookAhead:
     description: |
         The length of the buffer kept after an offset to allow the algorithm, once the Slice is considered finished, to wait further in time (up to that many samples) to find a minimum amplitude as the Slice offset point. This affects the latency of the algorithm.
  relRampUp:
     description: |
         The number of samples the relative envelope follower will take to reach the next value when raising. Typically, this will be faster than absRampUp.
  relRampDown:
     description: |
         The number of samples the relative envelope follower will take to reach the next value when falling. Typically, this will be faster than absRampDown.
  relThreshOn:
     description: |
         The threshold in dB of the relative envelope follower to trigger an onset, aka to go ON when in OFF state. It is computed on the difference between the two envelope followers.
  relThreshOff:
     description: |
         The threshold in dB of the relative envelope follower to reset, aka to allow the differential envelop to trigger again.
  highPassFreq:
     description: |
         The frequency of the fourth-order Linkwitz–Riley high-pass filter (https://en.wikipedia.org/wiki/Linkwitz%E2%80%93Riley_filter). This is done first on the signal to minimise low frequency intermodulation with very fast ramp lengths.
  maxSize:
     description: |
         How large can the buffer be for time-critical conditions, by allocating memory at instantiation time. This cannot be modulated.
output:
   An audio stream with square envelopes around the slices. The latency between the input and the output is **max(minLengthAbove + lookBack, max(minLengthBelow,lookAhead))**.
sc-code: |
    //basic tests: highPass sanity
    (
    {var env, source = SinOsc.ar(320,0,0.5);
       env = FluidAmpSlice.ar(source,highPassFreq:2000, outputType:1);
       [source, env]
    }.plot(0.03);
    )
    //basic tests: absRampUp-Down sanity
    (
       {var env, source = SinOsc.ar(320,0,0.5);
          env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:1000, outputType:2);
          [source.abs, env]
       }.plot(0.03);
    )
    //basic tests: absThresh sanity
    (
       {var env, source = SinOsc.ar(320,0,LFTri.ar(10).abs);
          env = FluidAmpSlice.ar(source,absRampUp:10, absRampDown:1000, outputType:0, relThreshOn:-144, relThreshOff: -200);
          [source, env]
       }.plot(0.05);
    )
