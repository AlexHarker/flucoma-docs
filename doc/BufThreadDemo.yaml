digest: A Tutorial Object to Experiment with Multithreading in FluidBuf* Objects
sc-categories: Libraries>FluidDecomposition
sc-related: Guides/FluCoMa, Guides/FluidDecomposition, Guides/FluidBufMultiThreading

description: |
  This class implements a simple tutorial object to illustrate and experiment with the behaviour of the FluidBuf* objects. It simply starts a process that will, upon completion of its task, write a single value to the destination buffer. This is the general behaviour of much of the CPU consuming FluidBuf* objects. In this case, as a toy example, the task is simply just wait and do nothing, to simulate a task that would actually take that long in the background.

  The process will, after waiting for **time** milliseconds, return its delay length as a Float writen at index [0] of the specified destination buffer.

process: This is the method that calls for the job to be done. In this case, simply waiting **time** milliseconds before writing a value in the destination buffer.

parameters:
  result: The destination buffer, where the value should be written at the end of the process.
  time: The duration in milliseconds of the delay that the background thread will wait for before yielding the value to the destination buffer.
sc-code: |
  // define a destination buffer
  b=Buffer.alloc(s,1);

  // a simple call, where we query the destination buffer upon completion with the action message.
  FluidBufThreadDemo.process(s, b, 1000, {|x|x.get(0,{|y|y.postln});});

  // as the 'process' returns its parent UGen, we can cancel the process easily
  c = FluidBufThreadDemo.process(s, b, 100000, {|x|x.get(0,{|y|y.postln});});
  c.cancel

  // if a simple call to the UGen is used, the progress can be monitored
  {c = FluidBufThreadDemo.kr(b,10000, Done.freeSelf); Poll.kr(Impulse.kr(2),c);}.scope;
